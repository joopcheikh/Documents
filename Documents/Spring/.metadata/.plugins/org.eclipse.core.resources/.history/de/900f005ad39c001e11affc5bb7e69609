package service;

import java.security.Key;
import java.util.function.Function;

import org.springframework.boot.autoconfigure.info.ProjectInfoProperties.Build;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

public class TestJwtService {
	
	static String SECRET_KEY = "73HDN367SDV3FYD73E";
	// méthodes qui permet de définir les revendication(infors) d'un user dans le token lorsqu'il s'est authentifié avec succès
	public Claims extractAllClaim(String token) {
		return Jwts
				.parserBuilder() // permet de créer un parseur de jeton Jwt. permet de décodage et la vérification des jetons
				.setSigningKey(getSigningKey()) // permet de spécifier la clé secrete utilisée
				.build() // permet de finir la construction du parseur
				.parseClaimsJws(token) // permet d'analyser la signature du token jwt
				.getBody(); // avoir les claims avoir construction
	}
	
	// construction de la clé de cryptage
	private Key getSigningKey() {
		byte[] byteVariable = Decoders.BASE64.decode(SECRET_KEY);
		return Keys.hmacShaKeyFor(byteVariable); // on utilise l'algorithme d'hmac
	}
	
	// méthode qui permet d'extraire une revendication spécifique d'un jeton
	public <T> T extractClaim(String token, Function<Claims, T> claimResolver) {
		final Claims claims = extractAllClaim(token);
		return claimResolver.apply(claims);
	}
	
	//méthode qui nous permet d'extraire le username
	public 
}

package entity;

import java.util.ArrayList;
import java.util.Collection;

import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Data
@Entity
@Table
public class AppUser
{
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	private String username;
	
	private String password;
	
	@ManyToMany(fetch = FetchType.EAGER) /* LAZY: c'est a dire si je charge un objet user apartir de la db, il ne
	 va par charger les objets AppRole sauf en cas de besoin 
	 EAGER: Dès que je charge un User, i've automatically these roles
	 quand on utilise EAGER, il est préférable d'initialiser la collection avec new  ArrayList<>() ce n'est pas obligatoire
	 */
	private Collection<AppRole> appRoles = new ArrayList<>();
	
	// Constructor
	public AppUser(Long id, String username, String password, Collection<AppRole> appRoles) {
		super();
		this.id = id;
		this.username = username;
		this.password = password;
		this.appRoles = appRoles;
	}

	// Getters and Setters
	
	public Long getId() {
		return id;
	}


	public void setId(Long id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Collection<AppRole> getAppRoles() {
		return appRoles;
	}

	public void setAppRoles(Collection<AppRole> appRoles) {
		this.appRoles = appRoles;
	}
	
}

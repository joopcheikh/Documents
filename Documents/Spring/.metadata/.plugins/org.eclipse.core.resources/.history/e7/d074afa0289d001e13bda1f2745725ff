package Config;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Service
public class JwtService
{
	private static final String SECRET_KEY = "byovDLFXfpToQcLJdKESoxOW016NcFwS";
	
	// extraction de tous les claims
	// définir les revendications spécifique k n voulons inclure dans le jeton générer lorsqu'un user est authentifié avec succès
	Claims extractAllClaims(String token) {
		return Jwts
				.parserBuilder() // Permet de créer un perseur jwt (composant qui permet de décoder et vérifier les token)
				.setSigningKey(getSignIngKey()) // est utiliser pour spécifier la clé secrete utilisée lors de la vérification de la signature d'un jeton jwt
				.build() // permet de finaliser la construction du parseur Jwt
				.parseClaimsJws(token) // utiliser pour analyser un JWT avec une signature
				.getBody(); // utiliser pour récupérer les revendications d'un JWT après la constructioréussie, permettant ainsi d'accéder aux informations qpécifiques contenus dans le token
				
	}
	// Cette méthode est utilisée pour obtenir la clé secrete qui sera utilisée lors de la revendication du jeton jwt
	private Key getSignIngKey() {
		byte[] keyBytes = Decoders.BASE64.decode(SECRET_KEY);
		
		return Keys.hmacShaKeyFor(keyBytes); // Algorithmen d'hmac
	}
	
	// claimsResolver spécifie comment extraire la revendication souhaiteée à partir de l'ensemble des revendications du jeton
	// extraction d'une revendication spécifique à partir de la méthode extractAllClaims
	public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
		final Claims claims = extractAllClaims(token);
		return claimsResolver.apply(claims); // extrait une revendication spécifique à partir de l'objet claims
	}
	
	// extraire le nom d'utilisateur d'un jeton jwt
	public String extractUsername(String token) {
		// TODO Auto-generated method stub
		return extractClaim(token, Claims::getSubject);
	}
	
	// détermine si les infos du user son expirées
	private Date extractExpiration(String token) {
		return extractClaim(token, Claims::getExpiration);
	}
	
	// méthode pour construire et signer un token jwt
	public String generateToken(
			Map<String, Object> extraClaims,
			UserDetails userDetails
	) {
		return Jwts
				.builder()
				.setClaims(extraClaims) // Cette méthode permet d'ajouter des réclamations supplémentaires au token.
				.setSubject(userDetails.getUsername()) //  Définit le sujet du token, qui est généralement l'identifiant unique de l'utilisateur. Dans ce cas, il utilise le nom d'utilisateur extrait des détails de l'utilisateur (userDetails).
				.setIssuedAt(new Date(System.currentTimeMillis()))// Définit la date et l'heure d'émission du token. Elle est définie à la date actuelle.
				.setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 24)) // Définit la date et l'heure d'expiration du token. Dans cet exemple, le token expire après 24 heures à partir de la date d'émission.
				.signWith(getSignIngKey(), SignatureAlgorithm.HS256) //  Signe le token avec une clé de signature.
				.compact(); //  Compile le token JWT final sous forme de chaîne de caractères compacte.
	}
		
	// Another choice to generate the token without using extraClaims ...
	public String generateToken(UserDetails userDetails) {
		return generateToken(new HashMap<>(), userDetails);
	}
	
	// détermine si le token est expiré
	private boolean isTokenExpired(String token) {
		return extractExpiration(token).before(new Date());
	}
	
	// méthode pour vérifier la validité du token
	public boolean isTokenValid(String token, UserDetails userDetails) {
		final String username = extractUsername(token);
			
		return (username.equals(userDetails.getUsername())) && !isTokenExpired(token);
	}

}
